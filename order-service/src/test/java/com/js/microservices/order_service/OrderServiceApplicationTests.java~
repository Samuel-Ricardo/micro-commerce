package com.js.microservices.order_service;

import com.js.microservices.order_service.stub.InventoryClientStub;
import io.restassured.RestAssured;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;
import org.springframework.context.annotation.Import;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.containers.MySQLContainer;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.containers.wait.strategy.Wait;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import static org.hamcrest.Matchers.*;

@Import(TestcontainersConfiguration.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureWireMock(port = 0)
class OrderServiceApplicationTests {

	@ServiceConnection
	static PostgreSQLContainer postgre = new PostgreSQLContainer("postgres");

	/*
	 * @ServiceConnection
	 *
	 * static MySQLContainer mysql = new MySQLContainer("mysql");
     *
	 * @Container
	 * static GenericContainer<?> inventoryService;
	 *
	 */

	@LocalServerPort
	private Integer port;

	@BeforeEach
	void setup() {
		RestAssured.baseURI = "http://localhost";
		RestAssured.port = port;
	}

	static {
		postgre.start();

		System.out.println("Porta do postgres: " + postgre.getMappedPort(5432) + " host do postgres: " + postgre.getHost());

//		mysql
//				.waitingFor(Wait.forLogMessage(".*ready for connections.*", 1))
//				.withEnv("MYSQL_DATABASE", "inventory-service")
//				.withNetworkAliases("mysql-a")
//				.start();
//
//		System.out.println("Porta do mysql: " + mysql.getMappedPort(3306) + " host do mysql: " + mysql.getHost() + "Container Name: " + mysql.getContainerName().replace("/", ""));
//
//		inventoryService = new GenericContainer<>("samuelrcabral/inventory-service:test")
//				.withExposedPorts(8082)
//				.waitingFor(Wait.forListeningPort())
//				.dependsOn(mysql)
//				.withEnv("MYSQL_ROOT_PASSWORD", mysql.getPassword())
//				.withEnv("MYSQL_USER", mysql.getUsername())
//				.withEnv("MYSQL_PASSWORD", mysql.getPassword())
//				.withEnv("MYSQL_DATABASE", "inventory-service")
//				.withEnv("MYSQL_HOST", "mysql-a")
//				.withEnv("MYSQL_PORT", mysql.getMappedPort(3306).toString());
//
//
//
//		inventoryService.start();
//
//		System.out.println("Porta do inventory-service: " + inventoryService.getMappedPort(8082) + " host do inventory-service: " + inventoryService.getHost());
	}

	@Test
	void shouldPlaceOrder() {

		InventoryClientStub.stubInventoryCall("iphone_15", 100);

		String requestBody = """
				
				{
				  "orderNumber": "ORD-12345",
				  "skuCode": "iphone_15",
				  "price": 19.99,
				  "quantity": 100,
				  "userDetails": {
				    "email": "cliente@example.com",
				    "firstName": "Fulano",
				    "lastName": "de Tal"
				  }
				}
				
				""";

		RestAssured.given()
				.contentType("application/json")
				.body(requestBody)
				.when()
				.post("/api/v1/orders")
				.then()
				.statusCode(201)
				.body(containsString("has been placed with success"))
		;


	}

	@Test
	void shouldNotPlaceOrderIfInventoryIsNotAvailable() {

		InventoryClientStub.stubInventoryCall("iphone_15", 101);

		String requestBody = """
				
				{
				  "orderNumber": "ORD-12345",
				  "skuCode": "iphone_15",
				  "price": 19.99,
				  "quantity": 101,
				  "userDetails": {
				    "email": "cliente@example.com",
				    "firstName": "Fulano",
				    "lastName": "de Tal"
				  }
				}
				
				""";

		RestAssured.given()
				.contentType("application/json")
				.body(requestBody)
				.when()
				.post("/api/v1/orders")
				.then()
				.statusCode(422)
				.body(contains("statusCode", equalTo("UNPROCESSABLE_ENTITY")))
		;
	}
}